/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useLoader } from '@react-three/fiber'
import { TextureLoader } from "three"

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/gears.gltf')
  const { actions } = useAnimations(animations, group)

  const one = useRef();
  const two = useRef();
  const three = useRef();
  const four = useRef();
  const five = useRef();
  const six = useRef();

  const texture = useLoader(TextureLoader, 'metal.jpg')

  return (
    <group ref={group} {...props} dispose={null} scale='0.5'>

      <mesh ref={six} name="Cylinder" geometry={nodes.Cylinder.geometry}>
      <AnimateFrame meshRef={six}/>
      <meshStandardMaterial attach='material' metalness={1} roughness={0.1} map={texture}/>
      </mesh>

      <mesh ref={one} geometry={nodes.Cylinder001.geometry} material={nodes.Cylinder001.material} position={[-2.21, 0, 0.39]} />
      <AnimateFrame meshRef={one}/>

      <mesh ref={two}
        geometry={nodes.Cylinder002.geometry}
        position={[3.18, -0.48, -0.95]}
      >
        <meshStandardMaterial attach='material' metalness={1} roughness={0.1} map={texture}/>
      </mesh>
      <AnimateFrame meshRef={two} change={true}/>

      <mesh ref={three} geometry={nodes.Cylinder003.geometry} material={nodes.Cylinder003.material} position={[0, -0.31, 0]} />
      <AnimateFrame meshRef={three}/>

      <mesh ref={four}
        geometry={nodes.Cylinder004.geometry}
        material={nodes.Cylinder004.material}
        position={[0.28, -0.99, -2.62]}
      />
      <AnimateFrame meshRef={four}/>

      <mesh ref={five}
        geometry={nodes.Cylinder005.geometry}
        material={nodes.Cylinder005.material}
        position={[3.18, -0.99, -0.95]}
      />
      <AnimateFrame meshRef={five}/>

    </group>
  )
}

useGLTF.preload('/gears.gltf')


const AnimateFrame = (props) => {
  useFrame(({ clock }) => {
    let amount = 0.01
    if(props.change){
      amount = -0.01
    }

    props.meshRef.current.rotation.y += amount;
    props.meshRef.current.rotation.z = 0.00;
    props.meshRef.current.rotation.x = 0.00;
  });
  return null;
}